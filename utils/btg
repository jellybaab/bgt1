#!/usr/bin/python3
#

import sys
import keyring
import requests
import json
import getpass
from pywallet import wallet
from sjcl import SJCL

VERBOSE=True

#
# Create Wallet support functions
#

def create_hd():
    """From https://github.com/ranaroussi/pywallet"""
    # generate 12 word mnemonic seed
    seed = wallet.generate_mnemonic()

    # create bitcoin wallet
    w = wallet.create_wallet(network="BTC", seed=seed, children=1)
    return w


def create_backup_hd(base_url, headers, coin):
    url = base_url + "v2/" + coin + "/key"
    user_options = { "source": "backup"}
    r = requests.post(url, headers=headers, json=user_options)
    print_response(url, headers, r)
    return r.json()


def create_bitgo_hd(base_url, headers, coin):
    url = base_url + "v2/" + coin + "/key"
    user_options = { "source": "bitgo"}
    r = requests.post(url, headers=headers, json=user_options)
    print_response(url, headers, r)
    return r.json()


def add_keychain(base_url, headers, coin, key, source=None, encryptedPrv=None):
    url = base_url + "v2/" + coin + "/key"
    headers["Content-Type"] = "application/json"
    user_options = { "pub": key}
    if source != None:
        user_options["source"] = source
    if encryptedPrv != None:
        user_options["encryptedPrv"] = str(encryptedPrv)
    print_verbose("add_keychain data='" + str(user_options) + "'")
    r = requests.post(url, headers=headers, json=user_options)
    print_response(url, headers, r)
    return r.json()
    

#
# Functions to process commands
#
def print_help():
    print("btg command")
    print("command:")
    print("\tping                                  - Calls the ping api")
    print("\tsession                               - Returns session information")
    print("\tconstants                             - Returns client constants")
    print("\tme                                    - Returns current user profile")
    print("\tlist_keychains <COIN>                 - Lists keychains for a specific coin")
    print("\tlk <COIN>                             - Same as list_keychains")
    print("\tlist_wallets <COIN>                   - Lists wallets for a specific coin")
    print("\tlw <COIN>                             - Same as list_wallets")
    print("\tget_wallet_address <COIN> <WALLET ID> - Display wallet info, including it's receive address")
    print("\tgwa <COIN> <LABEL>                    - Same as get_wallet_address")
    print("\tcreate_wallet_advanced <COIN> <LABEL> - Create a wallet for a specific coin")
    print("\tcwa <COIN> <LABEL>                    - Same as create_wallet_advanced")
    print("\tsend_transaction <COIN> <WALLET ID> <RECEIVE ADDRESS> <AMOUNT> - Send coinage")
    print("\tst <COIN> <WALLET ID> <RECEIVE ADDRESS> <AMOUNT>               - Same as send_transaction")


def parse_args():
    if len(sys.argv) == 1:
        print_help()
        sys.exit()


def print_response(url, headers, r):
    if VERBOSE:
        print("url = '" + url + "'")
        print("request headers = " + json.dumps(headers, indent=4, sort_keys=True))
        print("status = " + str(r.status_code))
        print("response headers = " + json.dumps(dict(r.headers), indent=4, sort_keys=True))
    try:
        j = json.loads(r.text)
        print(json.dumps(j, indent=4, sort_keys=True))
    except Exception as ex:
        #print("EXCEPTION '" + str(ex) + "'")
        print("raw r.text = '" + str(r.text) + "'")


def print_verbose(s):
    if VERBOSE:
        print(s)


def cmd_ping(base_url):
    url = base_url + "v2/ping"
    r = requests.get(url)
    print_response(url, None, r)


def cmd_constants(base_url, headers):
    url = base_url + "v1/client/constants"
    r = requests.get(url)
    print_response(url, headers, r)


def cmd_me(base_url, headers):
    url = base_url + "v2/user/me"
    r = requests.get(url, headers=headers)
    print_response(url, headers, r)


def cmd_session(base_url, headers):
    url = base_url + "v2/user/session"
    r = requests.get(url, headers=headers)
    print_response(url, headers, r)


def cmd_list_keychains(base_url, headers, coin):
    url = base_url + "v2/" + coin + "/key"
    r = requests.get(url, headers=headers)
    print_response(url, headers, r)


def cmd_list_wallets(base_url, headers, coin):
    url = base_url + "v2/" + coin + "/wallet"
    r = requests.get(url, headers=headers)
    print_response(url, headers, r)


def cmd_create_wallet_advanced(base_url, headers, coin, wallet_label):
    passwd = getpass.getpass("Enter password to encrypt xprivate key in wallet:")
    user_key = create_hd()
    print_verbose("user key = " + str(user_key));
    encryptedPrv = SJCL().encrypt(user_key["xprivate_key"].encode("iso-8859-15"), passwd)
    user_keychain = add_keychain(base_url, headers, coin, user_key["xpublic_key"], None, encryptedPrv)
    user_key_id = user_keychain["id"]

    # This is where you would securely store user key material
    # Just an example -- store what you need
    keyring.set_password(keyring_system, "user_xprivate_key", user_key["xprivate_key"])
    keyring.set_password(keyring_system, "user_key_id", user_key_id)

    backup_key = create_hd()
    print_verbose("backup key = " + str(backup_key))
    backup_keychain = add_keychain(base_url, headers, coin, backup_key["xpublic_key"], "backup")
    backup_key_id = backup_keychain["id"]

    # This is where you would securely store backup key material
    # Just an example -- store what you need
    keyring.set_password(keyring_system, "backup_xprivate_key", backup_key["xprivate_key"])
    keyring.set_password(keyring_system, "backup_key_id", backup_key_id)

    bitgo_keychain = create_bitgo_hd(base_url, headers, coin)
    bitgo_key_id = bitgo_keychain["id"]
    backup_keychain = add_keychain(base_url, headers, coin, bitgo_keychain["pub"], "bitgo")

    url = base_url + "v2/" + coin + "/wallet"

    user_options = { "label": wallet_label, "m": 2, "n": 3, "keys": [ user_key_id, backup_key_id, bitgo_key_id]}
    print_verbose("create bitgo key: data = '" + str(user_options) + "'")
    r = requests.post(url, headers=headers, json=user_options)
    print_response(url, headers, r)


def cmd_get_wallet_address(base_url, headers, coin, wallet_id):
    url = base_url + "v2/" + coin + "/wallet/" + wallet_id
    r = requests.get(url, headers=headers)
    print_response(url, headers, r)


def cmd_send_transaction(base_url, headers, coin, wallet_id, receive_address, amount):
    # Need to send this via BitGo Express
    passwd = getpass.getpass("Enter password to decrypt xprivate key in wallet:")
    url = base_url + "v2/" + coin + "/wallet/" + wallet_id + "/sendcoins"
    options = {"address": receive_address, "amount": amount, "walletPassphrase": passwd}
    print_verbose("send_transaction options: '" + str(options) + "'")
    headers["Content-Type"] = "application/json"
    r = requests.get(url, headers=headers, json=options)
    print_response(url, headers, r)

#
# Constants / configs - move to external file
#

# Use BitGo Express if you don't want the key to fly over the wire
base_url_bitgo_express = "http://localhost:3080/api/"
base_url = "https://test.bitgo.com/api/"

# keyring directory
keyring_system = "bitgo"
keyring_api_key_key = "api_key"


#
# MAIN
#

parse_args()


command = sys.argv[1]
num_args = len(sys.argv)

if command != "ping":
    api_key = keyring.get_password(keyring_system, keyring_api_key_key)
    headers = {"Authorization": "Bearer " + api_key}
    print_verbose("api key is '" + api_key + "'")


if command == "ping":
    cmd_ping(base_url)
elif command == "constants":
    cmd_constants(base_url, headers)
elif command == "me":
    cmd_me(base_url, headers)
elif command == "session":
    cmd_session(base_url, headers)
elif command == "list_keychains" or command == "lk":
    if num_args >= 3:
        cmd_list_keychains(base_url, headers, sys.argv[2])
    else:
        print("list_keychains needs a coin, such as tbtc")
elif command == "list_wallets" or command == "lw":
    if num_args >= 3:
        cmd_list_wallets(base_url, headers, sys.argv[2])
    else:
        print("list_wallets needs a coin, such as tbtc")
elif command == "create_wallet_advanced" or command == "cwa":
    if num_args >= 4:
        cmd_create_wallet_advanced(base_url, headers, sys.argv[2], sys.argv[3])
    else:
        print("create_wallet_advanced needs a coin and a wallet label")
elif command == "get_wallet_address" or command == "gwa":
    if num_args >= 4:
        cmd_get_wallet_address(base_url, headers, sys.argv[2], sys.argv[3])
    else:
        print("get_wallet_address needs a coin and a wallet id")
elif command == "send_transation" or command == "st":
    if num_args >= 6:
        cmd_send_transaction(base_url, headers, sys.argv[2], sys.argv[3], sys.argv[4], sys.argv[5])
    else:
        print("send_transaction needs a coin and a wallet id a receiver address and an amount")
else:
    print("Command '" + command + "' not recognized")



